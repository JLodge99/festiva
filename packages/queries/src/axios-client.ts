//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import axios, { AxiosError } from 'axios';
import type { AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

//-----ClientClass--Client---
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming


export class Client {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";

    }

    /**
     * Get country info for the given country
     * @return OK
     */
    countryCountryInfo(countryCode: string, cancelToken?: CancelToken | undefined): Promise<CountryInfoDto> {
        let url_ = this.baseUrl + "/api/v3/CountryInfo/{countryCode}";
        if (countryCode === undefined || countryCode === null)
          throw new Error("The parameter 'countryCode' must be defined.");
        url_ = url_.replace("{countryCode}", encodeURIComponent("" + countryCode));
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCountryCountryInfo(_response);
        });
    }

    protected processCountryCountryInfo(response: AxiosResponse): Promise<CountryInfoDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CountryInfoDto.fromJS(resultData200);
            return Promise.resolve<CountryInfoDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CountryInfoDto>(null as any);
    }

    /**
     * Get all available countries
     * @return OK
     */
    countryAvailableCountries( cancelToken?: CancelToken | undefined): Promise<CountryV3Dto[]> {
        let url_ = this.baseUrl + "/api/v3/AvailableCountries";
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCountryAvailableCountries(_response);
        });
    }

    protected processCountryAvailableCountries(response: AxiosResponse): Promise<CountryV3Dto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(CountryV3Dto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<CountryV3Dto[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CountryV3Dto[]>(null as any);
    }

    /**
     * Get long weekends for a given country
     * @param availableBridgeDays (optional) 
     * @param subdivisonCode (optional) 
     * @return OK
     */
    longWeekendLongWeekend(year: number, countryCode: string, availableBridgeDays: number | undefined, subdivisonCode: string | undefined, cancelToken?: CancelToken | undefined): Promise<LongWeekendV3Dto[]> {
        let url_ = this.baseUrl + "/api/v3/LongWeekend/{year}/{countryCode}?";
        if (year === undefined || year === null)
          throw new Error("The parameter 'year' must be defined.");
        url_ = url_.replace("{year}", encodeURIComponent("" + year));
        if (countryCode === undefined || countryCode === null)
          throw new Error("The parameter 'countryCode' must be defined.");
        url_ = url_.replace("{countryCode}", encodeURIComponent("" + countryCode));
        if (availableBridgeDays === null)
            throw new Error("The parameter 'availableBridgeDays' cannot be null.");
        else if (availableBridgeDays !== undefined)
            url_ += "availableBridgeDays=" + encodeURIComponent("" + availableBridgeDays) + "&";
        if (subdivisonCode === null)
            throw new Error("The parameter 'subdivisonCode' cannot be null.");
        else if (subdivisonCode !== undefined)
            url_ += "subdivisonCode=" + encodeURIComponent("" + subdivisonCode) + "&";
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processLongWeekendLongWeekend(_response);
        });
    }

    protected processLongWeekendLongWeekend(response: AxiosResponse): Promise<LongWeekendV3Dto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(LongWeekendV3Dto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<LongWeekendV3Dto[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<LongWeekendV3Dto[]>(null as any);
    }

    /**
     * Get public holidays
     * @return Public holidays
     */
    publicHolidayPublicHolidaysV3(year: number, countryCode: string, cancelToken?: CancelToken | undefined): Promise<PublicHolidayV3Dto[]> {
        let url_ = this.baseUrl + "/api/v3/PublicHolidays/{year}/{countryCode}";
        if (year === undefined || year === null)
          throw new Error("The parameter 'year' must be defined.");
        url_ = url_.replace("{year}", encodeURIComponent("" + year));
        if (countryCode === undefined || countryCode === null)
          throw new Error("The parameter 'countryCode' must be defined.");
        url_ = url_.replace("{countryCode}", encodeURIComponent("" + countryCode));
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processPublicHolidayPublicHolidaysV3(_response);
        });
    }

    protected processPublicHolidayPublicHolidaysV3(response: AxiosResponse): Promise<PublicHolidayV3Dto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(PublicHolidayV3Dto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<PublicHolidayV3Dto[]>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            return throwException("Validation failure", status, _responseText, _headers);

        } else if (status === 404) {
            const _responseText = response.data;
            return throwException("CountryCode is unknown", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PublicHolidayV3Dto[]>(null as any);
    }

    /**
     * Is today a public holiday
     * @param countryCode The Country Code
     * @param countyCode (optional) Federal State Code
     * @param offset (optional) utc timezone offset
     * @return Today is a public holiday
     */
    publicHolidayIsTodayPublicHoliday(countryCode: string, countyCode: string | undefined, offset: number | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/v3/IsTodayPublicHoliday/{countryCode}?";
        if (countryCode === undefined || countryCode === null)
          throw new Error("The parameter 'countryCode' must be defined.");
        url_ = url_.replace("{countryCode}", encodeURIComponent("" + countryCode));
        if (countyCode === null)
            throw new Error("The parameter 'countyCode' cannot be null.");
        else if (countyCode !== undefined)
            url_ += "countyCode=" + encodeURIComponent("" + countyCode) + "&";
        if (offset === null)
            throw new Error("The parameter 'offset' cannot be null.");
        else if (offset !== undefined)
            url_ += "offset=" + encodeURIComponent("" + offset) + "&";
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processPublicHolidayIsTodayPublicHoliday(_response);
        });
    }

    protected processPublicHolidayIsTodayPublicHoliday(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status === 204) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status === 400) {
            const _responseText = response.data;
            return throwException("Validation failure", status, _responseText, _headers);

        } else if (status === 404) {
            const _responseText = response.data;
            return throwException("CountryCode is unknown", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * Returns the upcoming public holidays for the next 365 days for the given country
     * @return OK
     */
    publicHolidayNextPublicHolidays(countryCode: string, cancelToken?: CancelToken | undefined): Promise<PublicHolidayV3Dto[]> {
        let url_ = this.baseUrl + "/api/v3/NextPublicHolidays/{countryCode}";
        if (countryCode === undefined || countryCode === null)
          throw new Error("The parameter 'countryCode' must be defined.");
        url_ = url_.replace("{countryCode}", encodeURIComponent("" + countryCode));
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processPublicHolidayNextPublicHolidays(_response);
        });
    }

    protected processPublicHolidayNextPublicHolidays(response: AxiosResponse): Promise<PublicHolidayV3Dto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(PublicHolidayV3Dto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<PublicHolidayV3Dto[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PublicHolidayV3Dto[]>(null as any);
    }

    /**
     * Returns the upcoming public holidays for the next 7 days
     * @return OK
     */
    publicHolidayNextPublicHolidaysWorldwide( cancelToken?: CancelToken | undefined): Promise<PublicHolidayV3Dto[]> {
        let url_ = this.baseUrl + "/api/v3/NextPublicHolidaysWorldwide";
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processPublicHolidayNextPublicHolidaysWorldwide(_response);
        });
    }

    protected processPublicHolidayNextPublicHolidaysWorldwide(response: AxiosResponse): Promise<PublicHolidayV3Dto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(PublicHolidayV3Dto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<PublicHolidayV3Dto[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PublicHolidayV3Dto[]>(null as any);
    }

    /**
     * Get the version of the used Nager.Date library
     * @return OK
     */
    versionGetVersion( cancelToken?: CancelToken | undefined): Promise<VersionInfoDto> {
        let url_ = this.baseUrl + "/api/v3/Version";
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processVersionGetVersion(_response);
        });
    }

    protected processVersionGetVersion(response: AxiosResponse): Promise<VersionInfoDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = VersionInfoDto.fromJS(resultData200);
            return Promise.resolve<VersionInfoDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<VersionInfoDto>(null as any);
    }
}

//-----/ClientClass----

export * as Query from './axios-client/Query';



//-----Types.File-----
/** CountryInfo Dto */
export class CountryInfoDto implements ICountryInfoDto {
    /** CommonName */
    commonName!: string | undefined;
    /** OfficialName */
    officialName!: string | undefined;
    /** CountryCode */
    countryCode!: string | undefined;
    /** Region */
    region!: string | undefined;
    /** Country Borders */
    borders?: CountryInfoDto[] | undefined;

    constructor(data?: ICountryInfoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.commonName = _data["commonName"];
            this.officialName = _data["officialName"];
            this.countryCode = _data["countryCode"];
            this.region = _data["region"];
            if (Array.isArray(_data["borders"])) {
                this.borders = [] as any;
                for (let item of _data["borders"])
                    this.borders!.push(CountryInfoDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CountryInfoDto {
        data = typeof data === 'object' ? data : {};
        let result = new CountryInfoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["commonName"] = this.commonName;
        data["officialName"] = this.officialName;
        data["countryCode"] = this.countryCode;
        data["region"] = this.region;
        if (Array.isArray(this.borders)) {
            data["borders"] = [];
            for (let item of this.borders)
                data["borders"].push(item.toJSON());
        }
        return data;
    }
}

/** CountryInfo Dto */
export interface ICountryInfoDto {
    /** CommonName */
    commonName: string | undefined;
    /** OfficialName */
    officialName: string | undefined;
    /** CountryCode */
    countryCode: string | undefined;
    /** Region */
    region: string | undefined;
    /** Country Borders */
    borders?: CountryInfoDto[] | undefined;
}

/** Country */
export class CountryV3Dto implements ICountryV3Dto {
    countryCode!: string | undefined;
    name!: string | undefined;

    constructor(data?: ICountryV3Dto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.countryCode = _data["countryCode"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): CountryV3Dto {
        data = typeof data === 'object' ? data : {};
        let result = new CountryV3Dto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["countryCode"] = this.countryCode;
        data["name"] = this.name;
        return data;
    }
}

/** Country */
export interface ICountryV3Dto {
    countryCode: string | undefined;
    name: string | undefined;
}

export enum HolidayTypes {
    Public = "Public",
    Bank = "Bank",
    School = "School",
    Authorities = "Authorities",
    Optional = "Optional",
    Observance = "Observance",
}

/** Long Weekend */
export class LongWeekendV3Dto implements ILongWeekendV3Dto {
    /** Start Date */
    startDate?: Date;
    /** End Date */
    endDate?: Date;
    /** Day Count */
    dayCount?: number;
    /** Need Bridge Day */
    needBridgeDay?: boolean;
    /** Test */
    bridgeDays?: Date[] | undefined;

    constructor(data?: ILongWeekendV3Dto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.startDate = _data["startDate"] ? parseDateOnly(_data["startDate"].toString()) : <any>undefined;
            this.endDate = _data["endDate"] ? parseDateOnly(_data["endDate"].toString()) : <any>undefined;
            this.dayCount = _data["dayCount"];
            this.needBridgeDay = _data["needBridgeDay"];
            if (Array.isArray(_data["bridgeDays"])) {
                this.bridgeDays = [] as any;
                for (let item of _data["bridgeDays"])
                    this.bridgeDays!.push(parseDateOnly(item));
            }
        }
    }

    static fromJS(data: any): LongWeekendV3Dto {
        data = typeof data === 'object' ? data : {};
        let result = new LongWeekendV3Dto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["startDate"] = this.startDate ? formatDate(this.startDate) : <any>undefined;
        data["endDate"] = this.endDate ? formatDate(this.endDate) : <any>undefined;
        data["dayCount"] = this.dayCount;
        data["needBridgeDay"] = this.needBridgeDay;
        if (Array.isArray(this.bridgeDays)) {
            data["bridgeDays"] = [];
            for (let item of this.bridgeDays)
                data["bridgeDays"].push(formatDate(item));
        }
        return data;
    }
}

/** Long Weekend */
export interface ILongWeekendV3Dto {
    /** Start Date */
    startDate?: Date;
    /** End Date */
    endDate?: Date;
    /** Day Count */
    dayCount?: number;
    /** Need Bridge Day */
    needBridgeDay?: boolean;
    /** Test */
    bridgeDays?: Date[] | undefined;
}

/** Public Holiday */
export class PublicHolidayV3Dto implements IPublicHolidayV3Dto {
    /** The date */
    date?: Date;
    /** Local name */
    localName!: string | undefined;
    /** English name */
    name!: string | undefined;
    /** ISO 3166-1 alpha-2 */
    countryCode!: string | undefined;
    /** Is this public holiday every year on the same date */
    fixed?: boolean;
    /** Is this public holiday in every county (federal state) */
    global?: boolean;
    /** ISO-3166-2 - Federal states */
    counties?: string[] | undefined;
    /** The launch year of the public holiday */
    launchYear?: number | undefined;
    /** A list of types the public holiday it is valid */
    types!: HolidayTypes[] | undefined;

    constructor(data?: IPublicHolidayV3Dto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? parseDateOnly(_data["date"].toString()) : <any>undefined;
            this.localName = _data["localName"];
            this.name = _data["name"];
            this.countryCode = _data["countryCode"];
            this.fixed = _data["fixed"];
            this.global = _data["global"];
            if (Array.isArray(_data["counties"])) {
                this.counties = [] as any;
                for (let item of _data["counties"])
                    this.counties!.push(item);
            }
            this.launchYear = _data["launchYear"];
            if (Array.isArray(_data["types"])) {
                this.types = [] as any;
                for (let item of _data["types"])
                    this.types!.push(item);
            }
        }
    }

    static fromJS(data: any): PublicHolidayV3Dto {
        data = typeof data === 'object' ? data : {};
        let result = new PublicHolidayV3Dto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? formatDate(this.date) : <any>undefined;
        data["localName"] = this.localName;
        data["name"] = this.name;
        data["countryCode"] = this.countryCode;
        data["fixed"] = this.fixed;
        data["global"] = this.global;
        if (Array.isArray(this.counties)) {
            data["counties"] = [];
            for (let item of this.counties)
                data["counties"].push(item);
        }
        data["launchYear"] = this.launchYear;
        if (Array.isArray(this.types)) {
            data["types"] = [];
            for (let item of this.types)
                data["types"].push(item);
        }
        return data;
    }
}

/** Public Holiday */
export interface IPublicHolidayV3Dto {
    /** The date */
    date?: Date;
    /** Local name */
    localName: string | undefined;
    /** English name */
    name: string | undefined;
    /** ISO 3166-1 alpha-2 */
    countryCode: string | undefined;
    /** Is this public holiday every year on the same date */
    fixed?: boolean;
    /** Is this public holiday in every county (federal state) */
    global?: boolean;
    /** ISO-3166-2 - Federal states */
    counties?: string[] | undefined;
    /** The launch year of the public holiday */
    launchYear?: number | undefined;
    /** A list of types the public holiday it is valid */
    types: HolidayTypes[] | undefined;
}

/** Version Info Dto */
export class VersionInfoDto implements IVersionInfoDto {
    /** Name */
    name!: string | undefined;
    /** Version */
    version!: string | undefined;

    constructor(data?: IVersionInfoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.version = _data["version"];
        }
    }

    static fromJS(data: any): VersionInfoDto {
        data = typeof data === 'object' ? data : {};
        let result = new VersionInfoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["version"] = this.version;
        return data;
    }
}

/** Version Info Dto */
export interface IVersionInfoDto {
    /** Name */
    name: string | undefined;
    /** Version */
    version: string | undefined;
}

export function formatDate(d: Date) {
    return d.getFullYear() + '-' + 
        (d.getMonth() < 9 ? ('0' + (d.getMonth()+1)) : (d.getMonth()+1)) + '-' +
        (d.getDate() < 10 ? ('0' + d.getDate()) : d.getDate());
}

function parseDateOnly(s: string) {
    const date = new Date(s);
    return new Date(date.getTime() + 
        date.getTimezoneOffset() * 60000);
}
//-----/CustomTypes.File-----

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

function isAxiosError(obj: any | undefined): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}

//-----/Types.File-----

import { addResultTypeFactory } from './axios-client/helpers';
export { setBaseUrl, getBaseUrl } from './axios-client/helpers';
export { setAxiosFactory, getAxios } from './axios-client/helpers';


//-----PersistorHydrator.File-----
import type { PersistedClient } from '@tanstack/react-query-persist-client';
import type { DehydratedState, QueryKey } from '@tanstack/react-query'
import { getResultTypeFactory } from './axios-client/helpers';

/*
 * If you have Dates in QueryKeys (i.e. in request parameters), you need to deserialize them to Dates correctly
 * (otherwise they are deserialized as strings by default, and your queries are broken).
 */
export function deserializeDate(str: unknown) {
  if (!str || typeof str !== 'string') return str;
  if (!/^\d\d\d\d\-\d\d\-\d\d/.test(str)) return str;
  
  const date = new Date(str);
  const isDate = date instanceof Date && !isNaN(date as any);
  
  return isDate ? date : str;
}

export function deserializeDatesInQueryKeys(queryKey: QueryKey) {
  return queryKey
    // We need to replace `null` with `undefined` in query key, because
    // `undefined` is serialized as `null`.
    // And most probably if we have `null` in QueryKey it actually means `undefined`.
    // We can't keep nulls, because they have a different meaning, and e.g. boolean parameters are not allowed to be null.
    .map(x => (x === null ? undefined : x))
    .map(x => deserializeDate(x));
}

export function deserializeClassesInQueryData(queryKey: QueryKey, data: any) {
  if (!data) {
    return data;
  } else if (typeof data !== 'object') {
    return data;
  } else if ('pages' in data && 'pageParams' in data && Array.isArray(data.pages) && Array.isArray(data.pageParams)) {
    // infinite query
    data.pages = data.pages.map((page:any) => deserializeClassesInQueryData(queryKey, page));
  } else if (Array.isArray(data)) {
    return data.map(elem => constructDtoClass(queryKey, elem));
  } else {
    return constructDtoClass(queryKey, data);
  }
}

/*
 * Pass this function as `deserialize` option to createSyncStoragePersister/createAsyncStoragePersister
 * to correctly deserialize your DTOs (including Dates)
 */
export function persisterDeserialize(cache: string): PersistedClient {
  const client: PersistedClient = JSON.parse(cache);
  client.clientState.queries.forEach((query) => {
    query.state.data = deserializeClassesInQueryData(query.queryKey, query.state.data);
    query.queryKey = deserializeDatesInQueryKeys(query.queryKey);
  });

  return client;
}

export function constructDtoClass(queryKey: QueryKey, data: any): unknown {
  const resultTypeKey = getResultTypeClassKey(queryKey);
  const constructorFunction = getResultTypeFactory(resultTypeKey);

  if (!data || !constructorFunction)
    return data;

  return constructorFunction(data);
}

export function getResultTypeClassKey(queryKey: QueryKey): string {
  if (!Array.isArray(queryKey)) {
    return queryKey as unknown as string;
  }
  if (queryKey.length >= 2) {
    // We concatenate first and second elements, because they uniquely identify the query.
    // All other QueryKey elements are query parameters
    return `${queryKey[0]}___${queryKey[1]}`;
  }

  // We actually should never reach this point :)
  return queryKey.join('___');
}

export function initPersister() {
  
  addResultTypeFactory('Client___countryCountryInfo', (data: any) => { const result = new CountryInfoDto(); result.init(data); return result; });
  addResultTypeFactory('Client___countryAvailableCountries', (data: any) => { const result = new CountryV3Dto(); result.init(data); return result; });
  addResultTypeFactory('Client___longWeekendLongWeekend', (data: any) => { const result = new LongWeekendV3Dto(); result.init(data); return result; });
  addResultTypeFactory('Client___publicHolidayPublicHolidaysV3', (data: any) => { const result = new PublicHolidayV3Dto(); result.init(data); return result; });
  addResultTypeFactory('Client___publicHolidayNextPublicHolidays', (data: any) => { const result = new PublicHolidayV3Dto(); result.init(data); return result; });
  addResultTypeFactory('Client___publicHolidayNextPublicHolidaysWorldwide', (data: any) => { const result = new PublicHolidayV3Dto(); result.init(data); return result; });
  addResultTypeFactory('Client___versionGetVersion', (data: any) => { const result = new VersionInfoDto(); result.init(data); return result; });


}
//-----/PersistorHydrator.File----